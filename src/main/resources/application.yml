# application.yml

# üöÄ Configura√ß√µes do Servidor Web
server:
  port: 8080 # Porta padr√£o para a sua API

# üóÑÔ∏è Configura√ß√µes do Banco de Dados H2
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE # H2 em mem√≥ria, n√£o fecha o banco. √ötil para desenvolvimento.
    driver-class-name: org.h2.Driver
    username: sa
    password:
  h2:
    console:
      enabled: true # Habilita o console do H2
      path: /h2-console # Acesse em http://localhost:8080/h2-console
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update # Cria/atualiza o schema do DB automaticamente. **N√ÉO USE EM PRODU√á√ÉO!**
    show-sql: true # Exibe as queries SQL no console (√≥timo para depura√ß√£o)
    properties:
      hibernate:
        format_sql: true # Formata o SQL para melhor legibilidade no console

# üõ†Ô∏è Spring DevTools: Otimizando o Desenvolvimento
  devtools:
    restart:
      enabled: true # Reinicia a app automaticamente ao detectar mudan√ßas no c√≥digo
    livereload:
      enabled: true # Habilita o LiveReload (requer extens√£o no navegador)

# üîí Configura√ß√µes JWT para Gera√ß√£o e Valida√ß√£o Interna
# IMPORTANTE: EM PRODU√á√ÉO, A CHAVE SECRETA DEVE SER UMA VARI√ÅVEL DE AMBIENTE OU GERENCIADA POR UM SERVI√áO DE SECRETS!
jwt:
  secret: umaChaveSecretaMuitoLongaEComplexaParaAssinarTokensJWT # Use uma string longa, aleat√≥ria e segura (m√≠nimo de 32 caracteres para HMAC256).
  expiration: 3600000 # Tempo de expira√ß√£o do token em milissegundos (aqui: 1 hora)

# üìö Springdoc OpenAPI (Swagger): Documenta√ß√£o da API
springdoc:
  swagger-ui:
    path: /swagger-ui.html # Caminho para a interface do Swagger UI
    disable-swagger-default-url: true # Evita carregar a URL padr√£o do Swagger (Petstore)
  api-docs:
    path: /v3/api-docs # Caminho para os arquivos de defini√ß√£o da API (JSON/YAML)
